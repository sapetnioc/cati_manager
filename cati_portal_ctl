#! /usr/bin/env python3

import glob
import json
import os
import os.path as osp
import sys
import shutil
import subprocess
import tempfile
import secrets
import sys

import click

class Docker:
    ldap_image = 'ldap_cati_portal'
    sftp_image = 'sftp_cati_portal'
    postgres_image = 'postgres_cati_portal'
    portal_image = 'cati_portal'
    
    ldap_container = 'ldap_cati_portal'
    sftp_container = 'sftp_cati_portal'
    postgres_container = 'postgres_cati_portal'
    portal_container = 'cati_portal'
    
    def __init__(self):
        self.directory = osp.dirname(osp.dirname(osp.abspath(__file__)))
        self.git = osp.join(self.directory, 'git')
        self.postgres = osp.join(self.directory, 'postgres')
        self.venv = osp.join(self.directory, 'venv')
        self.run = osp.join(self.directory, 'run')
        self.tmp = osp.join(self.directory, 'tmp')
    
    def build(self, image, build_directory):
        build_directory = osp.join(self.git, 'docker', build_directory)
        check_call(['docker', 'build', '-t', image, build_directory])

    def pull(self, image):
        check_call(['docker', 'pull', image])

    def __call__(self, cmd, image=portal_image, rm=True, daemon=False, name=None):
        opts = []
        if rm:
            opts.append('--rm')
        if daemon:
            opts.append('-d')
        if name:
            opts += ['--name', name]
        
        check_call(['docker', 'run'] + opts + ['-v', '%s:/cati_portal' % self.directory, image] + cmd)

    def shell(self):
        if self.exists(self.portal_container):
            # Container exists, check if it is running
            if self.is_running(self.portal_container):
                # Container is running, execute a shell in container
                check_call(['docker', 'exec', '-it', self.portal_container, 'bash'])
            else:
                # Container is not running
                print('ERROR: cati_portal had been stopped, you may start it with:', sys.argv[0], 'start')
                sys.exit(1)
        else:
            # Container does not exists, start a shell in a temporary container
            check_call(['docker', 'run', '--rm', '-it', '-v', '%s:/cati_portal' % self.directory, self.portal_image, 'bash'])

    def exists(self, container):
        '''
        Check if a container exists
        '''
        return bool(subprocess.check_output(['docker', 'ps', '-a', '--format', '{{json .}}', '--filter', 'Name=^%s$' % container]))
                    
    def is_running(self, container):
        '''
        Check if a cotainer is running
        '''
        return subprocess.check_output(['docker', 'inspect', '-f', '{{.State.Running}}', container]) == 'true'

    def stop(self, container):
        check_call(['docker', 'stop', container])

@click.group()
def cli():
    pass

def check_call(cmd, **kwargs):
    print('-'*60)
    print(' '.join("'{0}'".format(i) for i in cmd))
    print('-'*60)
    if input is not None and 'universal_newlines' not in kwargs:
        kwargs['universal_newlines'] = True
    subprocess.run(cmd, check=True, **kwargs)

def check_output(cmd, input=None, **kwargs):
    print('-'*60)
    print(' '.join("'{0}'".format(i) for i in cmd))
    print('-'*60)
    if input is not None and 'universal_newlines' not in kwargs:
        kwargs['universal_newlines'] = True
    return subprocess.run(cmd,  check=True, stdout=subprocess.PIPE, **kwargs).stdout

@cli.command()
def install():
    container = Docker()
    directory = container.directory
    print('Creating new cati_portal instance in', directory)

    config_file = osp.join(directory, 'cati_portal_install.json')
    if not osp.exists(config_file):
        config_file_src = osp.join(directory, 'git', 'cati_portal_install.json')
        open(config_file, 'w').write(open(config_file_src).read())
    config = json.load(open(config_file))
    
    container.build(container.ldap_image, 'openldap')
    container.build(container.sftp_image, 'openssh')
    container.build(container.portal_image, 'portal')
    container.pull('osixia/phpldapadmin')
    container.build(container.postgres_image, 'postgres')
    
    postgres_secret_file = osp.join(container.run, 'postgres_secret')
    if not osp.exists(container.run):
        os.mkdir(container.run)
        open(postgres_secret_file, 'w').write(secrets.token_urlsafe())
    
    if not osp.exists(container.postgres):
        os.mkdir(container.postgres)
        container([], image=container.postgres_image, name=container.postgres_container, daemon=True)
        container.stop(container.postgres_container)
        
    if not osp.exists(container.venv):
        container(['python3', '-m', 'venv', '--system-site-packages', '/cati_portal/venv'])
        pip = '/cati_portal/venv/bin/pip'
        container([pip, 'install', '--upgrade', 'pip'])
        container([pip, 'install', '--editable', '/cati_portal/git'])

    #container(['/cati_portal/venv/bin/python', '-m', 'cati_portal.install', str(delete_existing), http_port, ssh_port])


@cli.command()
def shell():
    container = Docker()
    container.shell()

@cli.command()
def status():
    container = Docker()
    config_file = osp.join(container.directory, 'cati_portal_install.json')
    if not osp.exists(config_file):
        print('ERROR: cati_portal is not installed: missing file', config_file)
        sys.exit(1)
    config = json.load(open(config_file))
    
    if 'ldap_container' in config:
        if not container.exists(container.ldap_container):
            print('ERROR: container', container.ldap_container, 'does not exist')
        else:
            print('container', container.ldap_container, 'is', 
                  ('running' if container.is_running(container.ldap_container)
                   else 'stopped'))

    if 'sftp_container' in config:
        if not container.exists(container.sftp_container):
            print('ERROR: container', container.sftp_container, 'does not exist')
        else:
            print('container', container.sftp_container, 'is', 
                  ('running' if container.is_running(container.sftp_container)
                   else 'stopped'))
        
    if not container.exists(container.postgres_container):
        print('ERROR: container', container.postgres_container, 'does not exist')
    else:
        print('container', container.postgres_container, 'is', 
                ('running' if container.is_running(container.postgres_container)
                else 'stopped'))
        
    if not container.exists(container.portal_container):
        print('ERROR: container', container.portal_container, 'does not exist')
    else:
        print('container', container.portal_container, 'is', 
                ('running' if container.is_running(container.portal_container)
                else 'stopped'))
        

@cli.command()
def start():
    singularity = Singularity()
    singularity.start('cati_portal')

@cli.command()
def stop():
    singularity = Singularity()
    singularity.stop('cati_portal')

@cli.command()
def restart():
    singularity = Singularity()
    singularity.stop('cati_portal')
    singularity.start('cati_portal')



if __name__ == '__main__':
    try:
        cli()
    except Exception as e:
        print('-'*60)
        print('ERROR:', e, file=sys.stderr)
        raise
        sys.exit(1)
    sys.exit(0)
